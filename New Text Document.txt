using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Xml;
using System.Xml.Linq;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace MCare_CCA_Transformer
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("=== mCare to CCA Data Transformation ===\n");
            
            // Example 1: Patient Demographics Transformation
            PatientDemographicsTransformation();
            
            Console.WriteLine("\n\n" + new string('=', 60) + "\n");
            
            // Example 2: Care Plan/Clinical Data Transformation
            CarePlanTransformation();
            
            Console.WriteLine("\n\n" + new string('=', 60) + "\n");
            
            // Example 3: XML to JSON (typical for legacy systems)
            XmlToJsonHealthcareExample();
        }

        static void PatientDemographicsTransformation()
        {
            Console.WriteLine("EXAMPLE 1: Patient Demographics - mCare to CCA\n");
            
            // mCare JSON Schema (Source)
            string mCarePatientJson = @"{
                ""residentId"": ""MCR-2024-5678"",
                ""personalDetails"": {
                    ""firstName"": ""John"",
                    ""lastName"": ""Smith"",
                    ""dateOfBirth"": ""1945-03-15"",
                    ""gender"": ""M"",
                    ""nhsNumber"": ""1234567890""
                },
                ""contactInfo"": {
                    ""primaryPhone"": ""555-0123"",
                    ""email"": ""john.smith@email.com"",
                    ""address"": {
                        ""line1"": ""123 Care Home Lane"",
                        ""city"": ""Manchester"",
                        ""postcode"": ""M1 1AA"",
                        ""country"": ""UK""
                    }
                },
                ""emergencyContact"": {
                    ""name"": ""Mary Smith"",
                    ""relationship"": ""Daughter"",
                    ""phone"": ""555-0456""
                },
                ""admissionDate"": ""2024-01-15T10:30:00Z"",
                ""careLevel"": ""HIGH"",
                ""mobility"": ""Wheelchair"",
                ""dietaryRequirements"": [""Diabetic"", ""Low Sodium""]
            }";

            Console.WriteLine("Source (mCare Schema):");
            Console.WriteLine(mCarePatientJson);

            // Parse and Transform to CCA Schema
            JObject mCareData = JObject.Parse(mCarePatientJson);
            
            // CCA Medical Schema (Target)
            JObject ccaPatientData = new JObject
            {
                ["Patient"] = new JObject
                {
                    ["PatientID"] = mCareData["residentId"],
                    ["ExternalID"] = mCareData["residentId"], // Cross-reference
                    ["Demographics"] = new JObject
                    {
                        ["FirstName"] = mCareData["personalDetails"]["firstName"],
                        ["LastName"] = mCareData["personalDetails"]["lastName"],
                        ["DOB"] = mCareData["personalDetails"]["dateOfBirth"],
                        ["Sex"] = TransformGender(mCareData["personalDetails"]["gender"].ToString()),
                        ["SSN"] = mCareData["personalDetails"]["nhsNumber"] // NHS Number mapped to SSN field
                    },
                    ["ContactInformation"] = new JObject
                    {
                        ["PrimaryPhone"] = mCareData["contactInfo"]["primaryPhone"],
                        ["Email"] = mCareData["contactInfo"]["email"],
                        ["Address"] = new JObject
                        {
                            ["Street"] = mCareData["contactInfo"]["address"]["line1"],
                            ["City"] = mCareData["contactInfo"]["address"]["city"],
                            ["PostalCode"] = mCareData["contactInfo"]["address"]["postcode"],
                            ["Country"] = mCareData["contactInfo"]["address"]["country"]
                        }
                    },
                    ["EmergencyContacts"] = new JArray
                    {
                        new JObject
                        {
                            ["Name"] = mCareData["emergencyContact"]["name"],
                            ["Relationship"] = mCareData["emergencyContact"]["relationship"],
                            ["Phone"] = mCareData["emergencyContact"]["phone"],
                            ["IsPrimary"] = true
                        }
                    },
                    ["ClinicalInfo"] = new JObject
                    {
                        ["AdmissionDate"] = mCareData["admissionDate"],
                        ["CareLevel"] = TransformCareLevel(mCareData["careLevel"].ToString()),
                        ["MobilityStatus"] = mCareData["mobility"],
                        ["DietaryRestrictions"] = mCareData["dietaryRequirements"]
                    }
                }
            };

            Console.WriteLine("\n\nTransformed (CCA Schema):");
            Console.WriteLine(ccaPatientData.ToString(Newtonsoft.Json.Formatting.Indented));
        }

        static void CarePlanTransformation()
        {
            Console.WriteLine("EXAMPLE 2: Care Plan/Medication - mCare to CCA\n");
            
            // mCare Care Plan JSON
            string mCareCarePlanJson = @"{
                ""carePlanId"": ""CP-2024-001"",
                ""residentId"": ""MCR-2024-5678"",
                ""planDate"": ""2024-10-21"",
                ""assessments"": [
                    {
                        ""assessmentType"": ""MOBILITY"",
                        ""score"": 3,
                        ""notes"": ""Requires assistance with transfers""
                    },
                    {
                        ""assessmentType"": ""NUTRITION"",
                        ""score"": 4,
                        ""notes"": ""Good appetite, diabetic diet""
                    }
                ],
                ""medications"": [
                    {
                        ""medicationId"": ""MED-001"",
                        ""drugName"": ""Metformin"",
                        ""dosage"": ""500mg"",
                        ""frequency"": ""twice daily"",
                        ""route"": ""oral"",
                        ""prescribedBy"": ""Dr. Johnson"",
                        ""startDate"": ""2024-01-15""
                    },
                    {
                        ""medicationId"": ""MED-002"",
                        ""drugName"": ""Lisinopril"",
                        ""dosage"": ""10mg"",
                        ""frequency"": ""once daily"",
                        ""route"": ""oral"",
                        ""prescribedBy"": ""Dr. Johnson"",
                        ""startDate"": ""2024-01-15""
                    }
                ],
                ""careGoals"": [
                    {
                        ""goal"": ""Maintain blood sugar levels within target range"",
                        ""targetDate"": ""2024-12-31"",
                        ""status"": ""In Progress""
                    }
                ]
            }";

            Console.WriteLine("Source (mCare Care Plan):");
            Console.WriteLine(mCareCarePlanJson);

            JObject mCarePlan = JObject.Parse(mCareCarePlanJson);
            
            // Transform to CCA Treatment Plan Schema
            JObject ccaTreatmentPlan = new JObject
            {
                ["TreatmentPlan"] = new JObject
                {
                    ["PlanID"] = mCarePlan["carePlanId"],
                    ["PatientReference"] = mCarePlan["residentId"],
                    ["PlanDate"] = mCarePlan["planDate"],
                    ["ClinicalAssessments"] = new JArray(),
                    ["Prescriptions"] = new JArray(),
                    ["TreatmentGoals"] = new JArray()
                }
            };

            // Transform Assessments
            foreach (JObject assessment in mCarePlan["assessments"])
            {
                JObject ccaAssessment = new JObject
                {
                    ["Type"] = assessment["assessmentType"],
                    ["Value"] = assessment["score"],
                    ["ClinicalNotes"] = assessment["notes"],
                    ["AssessmentDate"] = mCarePlan["planDate"]
                };
                ((JArray)ccaTreatmentPlan["TreatmentPlan"]["ClinicalAssessments"]).Add(ccaAssessment);
            }

            // Transform Medications to Prescriptions
            foreach (JObject med in mCarePlan["medications"])
            {
                JObject ccaRx = new JObject
                {
                    ["PrescriptionID"] = med["medicationId"],
                    ["Medication"] = new JObject
                    {
                        ["DrugName"] = med["drugName"],
                        ["Strength"] = med["dosage"],
                        ["Form"] = "Tablet", // Default assumption
                        ["Route"] = TransformRoute(med["route"].ToString())
                    },
                    ["Instructions"] = new JObject
                    {
                        ["Frequency"] = med["frequency"],
                        ["Duration"] = "Ongoing"
                    },
                    ["Prescriber"] = med["prescribedBy"],
                    ["DatePrescribed"] = med["startDate"],
                    ["Status"] = "Active"
                };
                ((JArray)ccaTreatmentPlan["TreatmentPlan"]["Prescriptions"]).Add(ccaRx);
            }

            // Transform Care Goals to Treatment Goals
            foreach (JObject goal in mCarePlan["careGoals"])
            {
                JObject ccaGoal = new JObject
                {
                    ["Objective"] = goal["goal"],
                    ["TargetDate"] = goal["targetDate"],
                    ["CurrentStatus"] = goal["status"]
                };
                ((JArray)ccaTreatmentPlan["TreatmentPlan"]["TreatmentGoals"]).Add(ccaGoal);
            }

            Console.WriteLine("\n\nTransformed (CCA Treatment Plan):");
            Console.WriteLine(ccaTreatmentPlan.ToString(Newtonsoft.Json.Formatting.Indented));
        }

        static void XmlToJsonHealthcareExample()
        {
            Console.WriteLine("EXAMPLE 3: XML to JSON - Legacy System Integration\n");
            
            // Simulating CCA XML export (many legacy systems use XML)
            string ccaXmlData = @"<?xml version='1.0' encoding='UTF-8'?>
<ClinicalRecord>
    <PatientID>CCA-2024-9999</PatientID>
    <VisitDate>2024-10-21</VisitDate>
    <Provider>
        <Name>Dr. Sarah Williams</Name>
        <Specialty>Internal Medicine</Specialty>
    </Provider>
    <VitalSigns>
        <BloodPressure>
            <Systolic>120</Systolic>
            <Diastolic>80</Diastolic>
        </BloodPressure>
        <HeartRate>72</HeartRate>
        <Temperature>98.6</Temperature>
        <Weight>165</Weight>
    </VitalSigns>
    <Diagnoses>
        <Diagnosis>
            <Code>E11.9</Code>
            <Description>Type 2 diabetes mellitus without complications</Description>
        </Diagnosis>
        <Diagnosis>
            <Code>I10</Code>
            <Description>Essential hypertension</Description>
        </Diagnosis>
    </Diagnoses>
</ClinicalRecord>";

            Console.WriteLine("Source (CCA XML):");
            Console.WriteLine(ccaXmlData);

            // Convert XML to JSON
            XmlDocument doc = new XmlDocument();
            doc.LoadXml(ccaXmlData);
            string jsonFromXml = JsonConvert.SerializeXmlNode(doc, Newtonsoft.Json.Formatting.Indented);

            Console.WriteLine("\n\nConverted to JSON:");
            Console.WriteLine(jsonFromXml);

            // Now transform to mCare vitals schema
            JObject ccaData = JObject.Parse(jsonFromXml);
            JObject mCareVitals = new JObject
            {
                ["vitalsRecordId"] = Guid.NewGuid().ToString(),
                ["residentId"] = ccaData["ClinicalRecord"]["PatientID"],
                ["recordedDate"] = ccaData["ClinicalRecord"]["VisitDate"],
                ["recordedBy"] = ccaData["ClinicalRecord"]["Provider"]["Name"],
                ["measurements"] = new JObject
                {
                    ["bloodPressure"] = new JObject
                    {
                        ["systolic"] = ccaData["ClinicalRecord"]["VitalSigns"]["BloodPressure"]["Systolic"],
                        ["diastolic"] = ccaData["ClinicalRecord"]["VitalSigns"]["BloodPressure"]["Diastolic"],
                        ["unit"] = "mmHg"
                    },
                    ["pulse"] = new JObject
                    {
                        ["rate"] = ccaData["ClinicalRecord"]["VitalSigns"]["HeartRate"],
                        ["unit"] = "bpm"
                    },
                    ["temperature"] = new JObject
                    {
                        ["value"] = ccaData["ClinicalRecord"]["VitalSigns"]["Temperature"],
                        ["unit"] = "F"
                    },
                    ["weight"] = new JObject
                    {
                        ["value"] = ccaData["ClinicalRecord"]["VitalSigns"]["Weight"],
                        ["unit"] = "lbs"
                    }
                },
                ["clinicalNotes"] = ExtractDiagnoses(ccaData["ClinicalRecord"]["Diagnoses"])
            };

            Console.WriteLine("\n\nTransformed to mCare Vitals Schema:");
            Console.WriteLine(mCareVitals.ToString(Newtonsoft.Json.Formatting.Indented));
        }

        // Helper Methods for Data Transformation
        static string TransformGender(string mCareGender)
        {
            return mCareGender.ToUpper() switch
            {
                "M" => "Male",
                "F" => "Female",
                _ => "Other"
            };
        }

        static int TransformCareLevel(string careLevel)
        {
            return careLevel.ToUpper() switch
            {
                "LOW" => 1,
                "MEDIUM" => 2,
                "HIGH" => 3,
                "CRITICAL" => 4,
                _ => 0
            };
        }

        static string TransformRoute(string route)
        {
            return route.ToLower() switch
            {
                "oral" => "PO",
                "intravenous" => "IV",
                "intramuscular" => "IM",
                "subcutaneous" => "SC",
                "topical" => "TOP",
                _ => "PO"
            };
        }

        static string ExtractDiagnoses(JToken diagnoses)
        {
            var diagnosisList = new List<string>();
            
            if (diagnoses["Diagnosis"] is JArray diagArray)
            {
                foreach (var diag in diagArray)
                {
                    string code = diag["Code"]?.ToString() ?? "";
                    string desc = diag["Description"]?.ToString() ?? "";
                    diagnosisList.Add($"{code}: {desc}");
                }
            }
            else if (diagnoses["Diagnosis"] is JObject diagObj)
            {
                string code = diagObj["Code"]?.ToString() ?? "";
                string desc = diagObj["Description"]?.ToString() ?? "";
                diagnosisList.Add($"{code}: {desc}");
            }
            
            return string.Join("; ", diagnosisList);
        }
    }
}

/*
 * Key Transformation Patterns for Healthcare Systems:
 * 
 * 1. Field Mapping: Different field names for same data
 *    - mCare: "residentId" → CCA: "PatientID"
 *    - mCare: "nhsNumber" → CCA: "SSN"
 * 
 * 2. Structure Reorganization: Flat vs Nested
 *    - Group related fields into logical sections
 *    - Split combined fields into separate objects
 * 
 * 3. Data Type Conversion:
 *    - String codes to numeric values (care levels)
 *    - Date format standardization
 * 
 * 4. Value Transformation:
 *    - Gender: "M" → "Male"
 *    - Routes: "oral" → "PO"
 *    - Care levels: "HIGH" → 3
 * 
 * 5. Array Handling:
 *    - Transform medication lists with different structures
 *    - Map assessment arrays to clinical records
 * 
 * 6. Data Enrichment:
 *    - Add default values (medication form)
 *    - Generate new IDs for cross-referencing
 *    - Add metadata (timestamps, status)
 * 
 * NuGet Required: Newtonsoft.Json
 */